<div class="dashboard">
    <h1>Панель управления</h1>
    
    <div class="dashboard-stats">
        <div class="stat-card">
            <h3>Всего эпох</h3>
            <p><%= eras.length %></p>
        </div>
    </div>

    <div class="eras-management">
        <h2>Управление эпохами</h2>
        <button id="addEraBtn" class="btn btn-primary">Добавить эпоху</button>
        
        <div class="eras-list">
            <% eras.forEach(era => { %>
                <div class="era-item" data-id="<%= era.id %>">
                    <div class="era-info">
                        <h3><%= era.title %></h3>
                        <p><%= era.description.substring(0, 100) %>...</p>
                        <div class="era-meta">
                            <span class="era-years"><%= era.start_year %> - <%= era.end_year %></span>
                        </div>
                    </div>
                    <div class="era-actions">
                        <a href="/eras/<%= era.id %>" class="btn btn-secondary">Просмотр</a>
                        <button class="btn btn-primary edit-era">Редактировать</button>
                        <button class="btn btn-danger delete-era">Удалить</button>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>
</div>

<div id="addEraModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Добавить новую эпоху</h2>
        <form id="addEraForm" enctype="multipart/form-data">
            <div class="form-group">
                <label for="title">Название</label>
                <input type="text" id="title" name="title" required>
            </div>
            <div class="form-group">
                <label for="description">Описание</label>
                <textarea id="description" name="description" required></textarea>
            </div>
            <div class="form-group">
                <label for="start_year">Начало периода</label>
                <input type="number" id="start_year" name="start_year" required>
            </div>
            <div class="form-group">
                <label for="end_year">Конец периода</label>
                <input type="number" id="end_year" name="end_year" required>
            </div>
            <div class="form-group">
                <label for="tags">Теги (через запятую)</label>
                <input type="text" id="tags" name="tags">
            </div>
            <div class="form-group">
                <label for="image">Изображение</label>
                <input type="file" id="image" name="image" accept="image/*">
            </div>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </form>
    </div>
</div>

<div class="feedback-management">
    <h2>Обратная связь</h2>
    <div class="feedback-list">
        <% if (feedback && feedback.length > 0) { %>
            <% feedback.forEach(item => { %>
                <div class="feedback-item">
                    <div class="feedback-header">
                        <h3><%= item.name %></h3>
                        <span class="feedback-date"><%= new Date(item.created_at).toLocaleString() %></span>
                    </div>
                    <div class="feedback-content">
                        <p class="feedback-email"><strong>Email:</strong> <%= item.email %></p>
                        <p class="feedback-message"><%= item.message %></p>
                    </div>
                    <div class="feedback-actions">
                        <button class="btn btn-danger delete-feedback" data-id="<%= item.id %>">Удалить</button>
                    </div>
                </div>
            <% }); %>
        <% } else { %>
            <p class="no-feedback">Нет сообщений обратной связи</p>
        <% } %>
    </div>
</div>

<style>
.feedback-management {
    margin-top: 40px;
    padding: 20px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.feedback-list {
    margin-top: 20px;
}

.feedback-item {
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 15px;
    background: #f9f9f9;
}

.feedback-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.feedback-header h3 {
    margin: 0;
    color: #333;
}

.feedback-date {
    color: #666;
    font-size: 0.9em;
}

.feedback-content {
    margin: 10px 0;
}

.feedback-email {
    color: #666;
    margin-bottom: 10px;
}

.feedback-message {
    white-space: pre-wrap;
    line-height: 1.5;
}

.feedback-actions {
    margin-top: 10px;
    text-align: right;
}

.no-feedback {
    text-align: center;
    color: #666;
    padding: 20px;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const addEraBtn = document.getElementById('addEraBtn');
    const addEraModal = document.getElementById('addEraModal');
    const closeBtn = addEraModal.querySelector('.close');
    const addEraForm = document.getElementById('addEraForm');
    const editButtons = document.querySelectorAll('.edit-era');
    const deleteButtons = document.querySelectorAll('.delete-era');

    addEraBtn.onclick = function() {
        addEraModal.style.display = 'block';
    }

    closeBtn.onclick = function() {
        addEraModal.style.display = 'none';
    }

    window.onclick = function(event) {
        if (event.target == addEraModal) {
            addEraModal.style.display = 'none';
        }
    }

    addEraForm.onsubmit = async function(e) {
        e.preventDefault();
        const formData = new FormData(addEraForm);
        
        try {
            const response = await fetch('/admin/eras', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                window.location.reload();
            } else {
                alert('Ошибка при добавлении эпохи');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Ошибка при добавлении эпохи');
        }
    }

    editButtons.forEach(button => {
        button.onclick = function() {
            const eraId = this.closest('.era-item').dataset.id;
            window.location.href = `/eras/${eraId}`;
        }
    });

    deleteButtons.forEach(button => {
        button.onclick = async function() {
            const eraId = this.closest('.era-item').dataset.id;
            if (confirm('Вы уверены, что хотите удалить эту эпоху?')) {
                try {
                    const response = await fetch(`/admin/eras/${eraId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        this.closest('.era-item').remove();
                    } else {
                        alert('Ошибка при удалении эпохи');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Ошибка при удалении эпохи');
                }
            }
        }
    });

    // Обработка удаления сообщения обратной связи
    document.querySelectorAll('.delete-feedback').forEach(button => {
        button.onclick = async function() {
            const feedbackId = this.dataset.id;
            if (confirm('Вы уверены, что хотите удалить это сообщение?')) {
                try {
                    const response = await fetch(`/admin/feedback/${feedbackId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        this.closest('.feedback-item').remove();
                    } else {
                        alert('Ошибка при удалении сообщения');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Ошибка при удалении сообщения');
                }
            }
        }
    });
});
</script>

